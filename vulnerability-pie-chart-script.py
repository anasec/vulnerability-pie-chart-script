import pandas as pd
import win32com.client as win32
from win32api import RGB
import time
import os

def create_pie_chart(data, stage):
    try:
        # Ensure data is not empty
        if not data:
            print("No data to plot.")
            return

        # Create a pandas DataFrame
        df = pd.DataFrame(list(data.items()), columns=['Category', 'Count'])
        print("DataFrame created:")
        print(df)

        # Save the DataFrame to CSV file
        csv_file = 'chart_data.csv'
        df.to_csv(csv_file, index=False)
        print(f"DataFrame saved to {csv_file}")
        print(f"Current directory: {os.getcwd()}")
        print(f"CSV file exists: {os.path.exists(csv_file)}")

        # Start Word application
        word_app = win32.Dispatch('Word.Application')
        word_app.Visible = True
        doc = word_app.Documents.Add()

        # Add a chart
        inline_shape = doc.InlineShapes.AddChart(5)  # 5 is a pie chart
        chart = inline_shape.Chart
        chart.HasTitle = True
        chart.ChartTitle.Text = "Vulnerability Findings"
        chart.ChartTitle.Format.TextFrame2.TextRange.Font.Name = "Arial"
        print("Chart added successfully.")

        # Give some time for the Excel window to be ready
        time.sleep(5)

        # Access the embedded Excel sheet
        chart_data = chart.ChartData
        chart_data.Activate()
        workbook = chart_data.Workbook
        sheet = workbook.Worksheets(1)
        print("Accessed and activated embedded Excel sheet.")

        # Clear existing data
        sheet.Cells.Clear()
        print("Cleared existing data in Excel sheet.")

        # Load data from CSV into Excel
        sheet.QueryTables.Add(f'TEXT;{os.path.abspath(csv_file)}', sheet.Cells(1, 1))
        query_table = sheet.QueryTables(1)
        query_table.TextFileParseType = 1
        query_table.TextFileCommaDelimiter = True
        query_table.Refresh()
        print("Data loaded into Excel sheet from CSV.")

        # Verify the data written to Excel
        print("Manual verification of the Excel sheet content:")
        for i in range(1, len(data) + 2):
            category = sheet.Cells(i, 1).Value
            count = sheet.Cells(i, 2).Value
            print(f"Row {i}: {category}, {count}")

        # Correctly set the data range
        data_range = sheet.Range(sheet.Cells(1, 1), sheet.Cells(len(data) + 1, 2))
        print(f"Data range set: {data_range.Address}")

        # Set the chart's data source
        print("Setting chart source data...")
        chart.SetSourceData(data_range)
        print("Chart source data set.")

        # Recalculate and refresh the chart
        print("Forcing recalculation and refreshing chart...")
        workbook.Application.CalculateFull()
        time.sleep(2)
        chart.Refresh()
        print("Chart refreshed.")

        # Change chart colors
        color_map = {
            'Critical': RGB(192, 0, 0),       # Dark Red
            'High': RGB(255, 192, 0),         # Orange
            'Medium': RGB(255, 255, 0),       # Yellow
            'Low': RGB(0, 176, 80),           # Green
            'Informational': RGB(0, 176, 240) # Light Blue
        }
        series = chart.SeriesCollection(1)
        for i, (key, value) in enumerate(data.items(), start=1):
            try:
                point = series.Points(i)
                color = color_map.get(key, RGB(0, 0, 0))  # Default to black if not found
                point.Format.Fill.ForeColor.RGB = color
                print(f"Updated color for {key} to {color}")
            except Exception as e:
                print(f"An error occurred while updating color for {key}: {e}")

        print("Chart colors updated.")

        # Enable data labels and set to best fit
        series.ApplyDataLabels()
        for point in series.DataLabels():
            point.Position = 2  # Best fit
        print("Data labels enabled and set to best fit.")

        # Set legend position to the bottom
        chart.Legend.Position = 2  # Position bottom
        print("Legend position set to bottom.")

        print("Pie Chart Successfully Created! The document will remain open.")
    except Exception as e:
        print(f"An error occurred: {e}")

def get_input(prompt, validator):
    while True:
        value = input(prompt).strip()
        if validator(value):
            return value
        print("Invalid input. Please try again.")

# User Input
stage = get_input("Is this Pre-Remediation (press 1) or Post-Remediation (press 2) then press enter? ", lambda x: x in ["1", "2"])
data = {}

for category in ["Critical", "High", "Medium", "Low", "Informational"]:
    response = get_input(f"Are there any {category} Vulnerabilities? (y for yes n for no): ", lambda x: x in ["y", "n"]).lower()
    if response == 'y':
        count = get_input(f"How many {category} Vulnerabilities? ", lambda x: x.isdigit() and int(x) > 0)
        data[category] = int(count)

create_pie_chart(data, stage)
